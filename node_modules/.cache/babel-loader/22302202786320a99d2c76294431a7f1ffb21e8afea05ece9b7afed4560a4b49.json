{"ast":null,"code":"var _jsxFileName = \"E:\\\\TaskManager\\\\myapp\\\\src\\\\TaskContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState } from 'react';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TaskContext = /*#__PURE__*/createContext();\n\n// Task Provider component\nexport const TaskProvider = ({\n  children\n}) => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n\n  // Add a new task\n  const addTask = task => {\n    setTasks([...tasks, task]);\n  };\n\n  // Update an existing task\n  const updateTask = updatedTask => {\n    setTasks(tasks.map(task => task.id === updatedTask.id ? updatedTask : task));\n  };\n\n  // Delete a task\n  const deleteTask = taskId => {\n    setTasks(tasks.filter(task => task.id !== taskId));\n  };\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: {\n      tasks,\n      addTask,\n      updateTask,\n      deleteTask\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskProvider, \"+34uIVDBalDkucWnJ7Aj1Xxb0MA=\");\n_c = TaskProvider;\nvar _c;\n$RefreshReg$(_c, \"TaskProvider\");","map":{"version":3,"names":["React","createContext","useState","jsxDEV","_jsxDEV","TaskContext","TaskProvider","children","_s","tasks","setTasks","addTask","task","updateTask","updatedTask","map","id","deleteTask","taskId","filter","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/TaskManager/myapp/src/TaskContext.js"],"sourcesContent":["import React, { createContext, useState } from 'react';\r\n\r\n// Create the context\r\nexport const TaskContext = createContext();\r\n\r\n// Task Provider component\r\nexport const TaskProvider = ({ children }) => {\r\n  const [tasks, setTasks] = useState([]);\r\n\r\n  // Add a new task\r\n  const addTask = (task) => {\r\n    setTasks([...tasks, task]);\r\n  };\r\n\r\n  // Update an existing task\r\n  const updateTask = (updatedTask) => {\r\n    setTasks(tasks.map((task) => (task.id === updatedTask.id ? updatedTask : task)));\r\n  };\r\n\r\n  // Delete a task\r\n  const deleteTask = (taskId) => {\r\n    setTasks(tasks.filter((task) => task.id !== taskId));\r\n  };\r\n\r\n  return (\r\n    <TaskContext.Provider value={{ tasks, addTask, updateTask, deleteTask }}>\r\n      {children}\r\n    </TaskContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,QAAQ,OAAO;;AAEtD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,WAAW,gBAAGJ,aAAa,CAAC,CAAC;;AAE1C;AACA,OAAO,MAAMK,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACA,MAAMS,OAAO,GAAIC,IAAI,IAAK;IACxBF,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAEG,IAAI,CAAC,CAAC;EAC5B,CAAC;;EAED;EACA,MAAMC,UAAU,GAAIC,WAAW,IAAK;IAClCJ,QAAQ,CAACD,KAAK,CAACM,GAAG,CAAEH,IAAI,IAAMA,IAAI,CAACI,EAAE,KAAKF,WAAW,CAACE,EAAE,GAAGF,WAAW,GAAGF,IAAK,CAAC,CAAC;EAClF,CAAC;;EAED;EACA,MAAMK,UAAU,GAAIC,MAAM,IAAK;IAC7BR,QAAQ,CAACD,KAAK,CAACU,MAAM,CAAEP,IAAI,IAAKA,IAAI,CAACI,EAAE,KAAKE,MAAM,CAAC,CAAC;EACtD,CAAC;EAED,oBACEd,OAAA,CAACC,WAAW,CAACe,QAAQ;IAACC,KAAK,EAAE;MAAEZ,KAAK;MAAEE,OAAO;MAAEE,UAAU;MAAEI;IAAW,CAAE;IAAAV,QAAA,EACrEA;EAAQ;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACjB,EAAA,CAvBWF,YAAY;AAAAoB,EAAA,GAAZpB,YAAY;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}